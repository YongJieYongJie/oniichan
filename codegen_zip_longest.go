// Code generated by codegen.go DO NOT EDIT.
// Version: 0.0.0
// Checksum: 8747943399727867724

package oniichan

import (
	"github.com/YongJieYongJie/tttuples/atuple"
)

func ZipLongest2[T1, T2 any](
	in1 <-chan T1, in2 <-chan T2,
	fillValues atuple.Packed2[T1, T2],
) <-chan atuple.Packed2[T1, T2] {

	out := make(chan atuple.Packed2[T1, T2])
	go func() {
		defer close(out)
		for {
			e1, has1 := NextOrDefault(in1, fillValues.Item1())
			e2, has2 := NextOrDefault(in2, fillValues.Item2())
			
			if !has1 && !has2 {
				return
			}
			out <- atuple.Pack2(e1, e2)
		}
	}()
	return out
}

func ZipLongest3[T1, T2, T3 any](
	in1 <-chan T1, in2 <-chan T2, in3 <-chan T3,
	fillValues atuple.Packed3[T1, T2, T3],
) <-chan atuple.Packed3[T1, T2, T3] {

	out := make(chan atuple.Packed3[T1, T2, T3])
	go func() {
		defer close(out)
		for {
			e1, has1 := NextOrDefault(in1, fillValues.Item1())
			e2, has2 := NextOrDefault(in2, fillValues.Item2())
			e3, has3 := NextOrDefault(in3, fillValues.Item3())
			
			if !has1 && !has2 && !has3 {
				return
			}
			out <- atuple.Pack3(e1, e2, e3)
		}
	}()
	return out
}

func ZipLongest4[T1, T2, T3, T4 any](
	in1 <-chan T1, in2 <-chan T2, in3 <-chan T3, in4 <-chan T4,
	fillValues atuple.Packed4[T1, T2, T3, T4],
) <-chan atuple.Packed4[T1, T2, T3, T4] {

	out := make(chan atuple.Packed4[T1, T2, T3, T4])
	go func() {
		defer close(out)
		for {
			e1, has1 := NextOrDefault(in1, fillValues.Item1())
			e2, has2 := NextOrDefault(in2, fillValues.Item2())
			e3, has3 := NextOrDefault(in3, fillValues.Item3())
			e4, has4 := NextOrDefault(in4, fillValues.Item4())
			
			if !has1 && !has2 && !has3 && !has4 {
				return
			}
			out <- atuple.Pack4(e1, e2, e3, e4)
		}
	}()
	return out
}

func ZipLongest5[T1, T2, T3, T4, T5 any](
	in1 <-chan T1, in2 <-chan T2, in3 <-chan T3, in4 <-chan T4, in5 <-chan T5,
	fillValues atuple.Packed5[T1, T2, T3, T4, T5],
) <-chan atuple.Packed5[T1, T2, T3, T4, T5] {

	out := make(chan atuple.Packed5[T1, T2, T3, T4, T5])
	go func() {
		defer close(out)
		for {
			e1, has1 := NextOrDefault(in1, fillValues.Item1())
			e2, has2 := NextOrDefault(in2, fillValues.Item2())
			e3, has3 := NextOrDefault(in3, fillValues.Item3())
			e4, has4 := NextOrDefault(in4, fillValues.Item4())
			e5, has5 := NextOrDefault(in5, fillValues.Item5())
			
			if !has1 && !has2 && !has3 && !has4 && !has5 {
				return
			}
			out <- atuple.Pack5(e1, e2, e3, e4, e5)
		}
	}()
	return out
}

func ZipLongest6[T1, T2, T3, T4, T5, T6 any](
	in1 <-chan T1, in2 <-chan T2, in3 <-chan T3, in4 <-chan T4, in5 <-chan T5, in6 <-chan T6,
	fillValues atuple.Packed6[T1, T2, T3, T4, T5, T6],
) <-chan atuple.Packed6[T1, T2, T3, T4, T5, T6] {

	out := make(chan atuple.Packed6[T1, T2, T3, T4, T5, T6])
	go func() {
		defer close(out)
		for {
			e1, has1 := NextOrDefault(in1, fillValues.Item1())
			e2, has2 := NextOrDefault(in2, fillValues.Item2())
			e3, has3 := NextOrDefault(in3, fillValues.Item3())
			e4, has4 := NextOrDefault(in4, fillValues.Item4())
			e5, has5 := NextOrDefault(in5, fillValues.Item5())
			e6, has6 := NextOrDefault(in6, fillValues.Item6())
			
			if !has1 && !has2 && !has3 && !has4 && !has5 && !has6 {
				return
			}
			out <- atuple.Pack6(e1, e2, e3, e4, e5, e6)
		}
	}()
	return out
}

func ZipLongest7[T1, T2, T3, T4, T5, T6, T7 any](
	in1 <-chan T1, in2 <-chan T2, in3 <-chan T3, in4 <-chan T4, in5 <-chan T5, in6 <-chan T6, in7 <-chan T7,
	fillValues atuple.Packed7[T1, T2, T3, T4, T5, T6, T7],
) <-chan atuple.Packed7[T1, T2, T3, T4, T5, T6, T7] {

	out := make(chan atuple.Packed7[T1, T2, T3, T4, T5, T6, T7])
	go func() {
		defer close(out)
		for {
			e1, has1 := NextOrDefault(in1, fillValues.Item1())
			e2, has2 := NextOrDefault(in2, fillValues.Item2())
			e3, has3 := NextOrDefault(in3, fillValues.Item3())
			e4, has4 := NextOrDefault(in4, fillValues.Item4())
			e5, has5 := NextOrDefault(in5, fillValues.Item5())
			e6, has6 := NextOrDefault(in6, fillValues.Item6())
			e7, has7 := NextOrDefault(in7, fillValues.Item7())
			
			if !has1 && !has2 && !has3 && !has4 && !has5 && !has6 && !has7 {
				return
			}
			out <- atuple.Pack7(e1, e2, e3, e4, e5, e6, e7)
		}
	}()
	return out
}
