// Code generated by codegen.go DO NOT EDIT.
// Version: 0.0.0
// Checksum: 14251850363544269240

package oniichan

import (
	"github.com/YongJieYongJie/tttuples/atuple"
)

// StarMap2 is the 2-element version of StarMap.
func StarMap2[T1, T2, R any](
	f func(T1, T2) R,
	in <-chan atuple.Packed2[T1, T2],
) <-chan R {

	out := make(chan R)
	go func() {
		defer close(out)
		for e := range in {
			out <- f(e.Item1(), e.Item2())
		}
	}()
	return out
}

// StarMap3 is the 3-element version of StarMap.
func StarMap3[T1, T2, T3, R any](
	f func(T1, T2, T3) R,
	in <-chan atuple.Packed3[T1, T2, T3],
) <-chan R {

	out := make(chan R)
	go func() {
		defer close(out)
		for e := range in {
			out <- f(e.Item1(), e.Item2(), e.Item3())
		}
	}()
	return out
}

// StarMap4 is the 4-element version of StarMap.
func StarMap4[T1, T2, T3, T4, R any](
	f func(T1, T2, T3, T4) R,
	in <-chan atuple.Packed4[T1, T2, T3, T4],
) <-chan R {

	out := make(chan R)
	go func() {
		defer close(out)
		for e := range in {
			out <- f(e.Item1(), e.Item2(), e.Item3(), e.Item4())
		}
	}()
	return out
}

// StarMap5 is the 5-element version of StarMap.
func StarMap5[T1, T2, T3, T4, T5, R any](
	f func(T1, T2, T3, T4, T5) R,
	in <-chan atuple.Packed5[T1, T2, T3, T4, T5],
) <-chan R {

	out := make(chan R)
	go func() {
		defer close(out)
		for e := range in {
			out <- f(e.Item1(), e.Item2(), e.Item3(), e.Item4(), e.Item5())
		}
	}()
	return out
}

// StarMap6 is the 6-element version of StarMap.
func StarMap6[T1, T2, T3, T4, T5, T6, R any](
	f func(T1, T2, T3, T4, T5, T6) R,
	in <-chan atuple.Packed6[T1, T2, T3, T4, T5, T6],
) <-chan R {

	out := make(chan R)
	go func() {
		defer close(out)
		for e := range in {
			out <- f(e.Item1(), e.Item2(), e.Item3(), e.Item4(), e.Item5(), e.Item6())
		}
	}()
	return out
}

// StarMap7 is the 7-element version of StarMap.
func StarMap7[T1, T2, T3, T4, T5, T6, T7, R any](
	f func(T1, T2, T3, T4, T5, T6, T7) R,
	in <-chan atuple.Packed7[T1, T2, T3, T4, T5, T6, T7],
) <-chan R {

	out := make(chan R)
	go func() {
		defer close(out)
		for e := range in {
			out <- f(e.Item1(), e.Item2(), e.Item3(), e.Item4(), e.Item5(), e.Item6(), e.Item7())
		}
	}()
	return out
}
