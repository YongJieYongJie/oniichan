// Code generated by codegen.go DO NOT EDIT.
// Version: 0.0.0
// Checksum: 11306278636271878602

package oniichan

// Map2 is the 2-element version of Map.
func Map2[T1, T2, R any](
	f func(T1, T2) R,
	in1 <-chan T1, in2 <-chan T2,
) <-chan R {
	out := make(chan R)
	go func() {
		defer close(out)
		for {
			
			e1, has1 := Next(in1)
			if !has1 {
				break
			}
			
			e2, has2 := Next(in2)
			if !has2 {
				break
			}
			
			out <- f(e1, e2)
		}
	}()
	return out
}

// Map3 is the 3-element version of Map.
func Map3[T1, T2, T3, R any](
	f func(T1, T2, T3) R,
	in1 <-chan T1, in2 <-chan T2, in3 <-chan T3,
) <-chan R {
	out := make(chan R)
	go func() {
		defer close(out)
		for {
			
			e1, has1 := Next(in1)
			if !has1 {
				break
			}
			
			e2, has2 := Next(in2)
			if !has2 {
				break
			}
			
			e3, has3 := Next(in3)
			if !has3 {
				break
			}
			
			out <- f(e1, e2, e3)
		}
	}()
	return out
}

// Map4 is the 4-element version of Map.
func Map4[T1, T2, T3, T4, R any](
	f func(T1, T2, T3, T4) R,
	in1 <-chan T1, in2 <-chan T2, in3 <-chan T3, in4 <-chan T4,
) <-chan R {
	out := make(chan R)
	go func() {
		defer close(out)
		for {
			
			e1, has1 := Next(in1)
			if !has1 {
				break
			}
			
			e2, has2 := Next(in2)
			if !has2 {
				break
			}
			
			e3, has3 := Next(in3)
			if !has3 {
				break
			}
			
			e4, has4 := Next(in4)
			if !has4 {
				break
			}
			
			out <- f(e1, e2, e3, e4)
		}
	}()
	return out
}

// Map5 is the 5-element version of Map.
func Map5[T1, T2, T3, T4, T5, R any](
	f func(T1, T2, T3, T4, T5) R,
	in1 <-chan T1, in2 <-chan T2, in3 <-chan T3, in4 <-chan T4, in5 <-chan T5,
) <-chan R {
	out := make(chan R)
	go func() {
		defer close(out)
		for {
			
			e1, has1 := Next(in1)
			if !has1 {
				break
			}
			
			e2, has2 := Next(in2)
			if !has2 {
				break
			}
			
			e3, has3 := Next(in3)
			if !has3 {
				break
			}
			
			e4, has4 := Next(in4)
			if !has4 {
				break
			}
			
			e5, has5 := Next(in5)
			if !has5 {
				break
			}
			
			out <- f(e1, e2, e3, e4, e5)
		}
	}()
	return out
}

// Map6 is the 6-element version of Map.
func Map6[T1, T2, T3, T4, T5, T6, R any](
	f func(T1, T2, T3, T4, T5, T6) R,
	in1 <-chan T1, in2 <-chan T2, in3 <-chan T3, in4 <-chan T4, in5 <-chan T5, in6 <-chan T6,
) <-chan R {
	out := make(chan R)
	go func() {
		defer close(out)
		for {
			
			e1, has1 := Next(in1)
			if !has1 {
				break
			}
			
			e2, has2 := Next(in2)
			if !has2 {
				break
			}
			
			e3, has3 := Next(in3)
			if !has3 {
				break
			}
			
			e4, has4 := Next(in4)
			if !has4 {
				break
			}
			
			e5, has5 := Next(in5)
			if !has5 {
				break
			}
			
			e6, has6 := Next(in6)
			if !has6 {
				break
			}
			
			out <- f(e1, e2, e3, e4, e5, e6)
		}
	}()
	return out
}

// Map7 is the 7-element version of Map.
func Map7[T1, T2, T3, T4, T5, T6, T7, R any](
	f func(T1, T2, T3, T4, T5, T6, T7) R,
	in1 <-chan T1, in2 <-chan T2, in3 <-chan T3, in4 <-chan T4, in5 <-chan T5, in6 <-chan T6, in7 <-chan T7,
) <-chan R {
	out := make(chan R)
	go func() {
		defer close(out)
		for {
			
			e1, has1 := Next(in1)
			if !has1 {
				break
			}
			
			e2, has2 := Next(in2)
			if !has2 {
				break
			}
			
			e3, has3 := Next(in3)
			if !has3 {
				break
			}
			
			e4, has4 := Next(in4)
			if !has4 {
				break
			}
			
			e5, has5 := Next(in5)
			if !has5 {
				break
			}
			
			e6, has6 := Next(in6)
			if !has6 {
				break
			}
			
			e7, has7 := Next(in7)
			if !has7 {
				break
			}
			
			out <- f(e1, e2, e3, e4, e5, e6, e7)
		}
	}()
	return out
}
